import streamlit as st
import requests
from bs4 import BeautifulSoup
from duckduckgo_search import DDGS
from PIL import Image
import pytesseract
import re

st.set_page_config(page_title="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–≤–∏–∫", layout="wide")

class InternetResearchAI:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def search_duckduckgo(self, query: str, num_results: int = 5):
        try:
            with DDGS() as ddgs:
                results = []
                for result in ddgs.text(query, max_results=num_results):
                    results.append({
                        'title': result.get('title', ''),
                        'url': result.get('href', ''),
                        'description': result.get('body', '')
                    })
                return results
        except Exception as e:
            return []
    
    def get_page_content(self, url: str):
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            for tag in soup.find_all(['script', 'style', 'nav', 'footer', 'header']):
                tag.decompose()
            
            text = soup.get_text()
            text = re.sub(r'\s+', ' ', text)
            return text[:2000]
        except:
            return ""
    
    def extract_text_from_image(self, image):
        try:
            text = pytesseract.image_to_string(image, lang='rus+eng')
            return text.strip() if text else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except:
            return "–û—à–∏–±–∫–∞ OCR"

def main():
    st.title("üß† –£–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–æ–≤–∏–∫")
    st.write("–ò—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    research_ai = InternetResearchAI()
    
    option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", 
                     ["üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "üì∑ –ü–æ–∏—Å–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"])
    
    if option == "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫":
        text_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", 
                                 placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç 2024")
        
        if st.button("üîç –ù–∞–π—Ç–∏") and text_query:
            with st.spinner("–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."):
                results = research_ai.search_duckduckgo(text_query, 5)
                
                if results:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    for i, result in enumerate(results, 1):
                        st.subheader(f"{i}. {result['title']}")
                        st.write(f"**–°—Å—ã–ª–∫–∞:** {result['url']}")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {result['description']}")
                        st.write("---")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    else:
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                       type=['png', 'jpg', 'jpeg'])
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    extracted_text = research_ai.extract_text_from_image(image)
                    
                    if extracted_text and extracted_text not in ["–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–û—à–∏–±–∫–∞ OCR"]:
                        st.subheader("üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                        st.write(extracted_text)
                    else:
                        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()